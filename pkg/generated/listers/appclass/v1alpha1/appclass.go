/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This package imports things required by build scripts, to force `go mod` to see them as dependencies

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/diktyo-io/appclass-api/pkg/apis/appclass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppClassLister helps list AppClasses.
// All objects returned here must be treated as read-only.
type AppClassLister interface {
	// List lists all AppClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppClass, err error)
	// AppClasses returns an object that can list and get AppClasses.
	AppClasses(namespace string) AppClassNamespaceLister
	AppClassListerExpansion
}

// appClassLister implements the AppClassLister interface.
type appClassLister struct {
	indexer cache.Indexer
}

// NewAppClassLister returns a new AppClassLister.
func NewAppClassLister(indexer cache.Indexer) AppClassLister {
	return &appClassLister{indexer: indexer}
}

// List lists all AppClasses in the indexer.
func (s *appClassLister) List(selector labels.Selector) (ret []*v1alpha1.AppClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppClass))
	})
	return ret, err
}

// AppClasses returns an object that can list and get AppClasses.
func (s *appClassLister) AppClasses(namespace string) AppClassNamespaceLister {
	return appClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppClassNamespaceLister helps list and get AppClasses.
// All objects returned here must be treated as read-only.
type AppClassNamespaceLister interface {
	// List lists all AppClasses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppClass, err error)
	// Get retrieves the AppClass from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppClass, error)
	AppClassNamespaceListerExpansion
}

// appClassNamespaceLister implements the AppClassNamespaceLister
// interface.
type appClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppClasses in the indexer for a given namespace.
func (s appClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppClass))
	})
	return ret, err
}

// Get retrieves the AppClass from the indexer for a given namespace and name.
func (s appClassNamespaceLister) Get(name string) (*v1alpha1.AppClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appclass"), name)
	}
	return obj.(*v1alpha1.AppClass), nil
}
